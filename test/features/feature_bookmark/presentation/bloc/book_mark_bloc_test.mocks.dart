// Mocks generated by Mockito 5.4.5 from annotations
// in weather/test/features/feature_bookmark/presentation/bloc/book_mark_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/core/resources/data_state.dart' as _i2;
import 'package:weather/core/use_case/use_case.dart' as _i7;
import 'package:weather/features/feature_bookmark/domain/entities/city_entity.dart'
    as _i6;
import 'package:weather/features/feature_bookmark/domain/repository/city_repository.dart'
    as _i3;
import 'package:weather/features/feature_bookmark/domain/use_cases/delete_city_usecase.dart'
    as _i8;
import 'package:weather/features/feature_bookmark/domain/use_cases/get_all_city_usecase.dart'
    as _i4;
import 'package:weather/features/feature_bookmark/domain/use_cases/get_city_usecase.dart'
    as _i9;
import 'package:weather/features/feature_bookmark/domain/use_cases/save_city_usecase.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCityRepository_1 extends _i1.SmartFake
    implements _i3.CityRepository {
  _FakeCityRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCityUseCase extends _i1.Mock implements _i4.GetAllCityUseCase {
  MockGetAllCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.DataState<List<_i6.City>>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.DataState<List<_i6.City>>>.value(
            _FakeDataState_0<List<_i6.City>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.DataState<List<_i6.City>>>);
}

/// A class which mocks [DeleteCityUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCityUsecase extends _i1.Mock implements _i8.DeleteCityUsecase {
  MockDeleteCityUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CityRepository get cityRepository => (super.noSuchMethod(
        Invocation.getter(#cityRepository),
        returnValue: _FakeCityRepository_1(
          this,
          Invocation.getter(#cityRepository),
        ),
      ) as _i3.CityRepository);

  @override
  _i5.Future<_i2.DataState<String>> call(String? param) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue:
            _i5.Future<_i2.DataState<String>>.value(_FakeDataState_0<String>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.DataState<String>>);
}

/// A class which mocks [GetCityUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCityUsecase extends _i1.Mock implements _i9.GetCityUsecase {
  MockGetCityUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CityRepository get cityRepository => (super.noSuchMethod(
        Invocation.getter(#cityRepository),
        returnValue: _FakeCityRepository_1(
          this,
          Invocation.getter(#cityRepository),
        ),
      ) as _i3.CityRepository);

  @override
  set cityRepository(_i3.CityRepository? _cityRepository) => super.noSuchMethod(
        Invocation.setter(
          #cityRepository,
          _cityRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.DataState<_i6.City?>> call(String? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue: _i5.Future<_i2.DataState<_i6.City?>>.value(
            _FakeDataState_0<_i6.City?>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.DataState<_i6.City?>>);
}

/// A class which mocks [SaveCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveCityUseCase extends _i1.Mock implements _i10.SaveCityUseCase {
  MockSaveCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.DataState<_i6.City>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.DataState<_i6.City>>.value(
            _FakeDataState_0<_i6.City>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.DataState<_i6.City>>);
}
